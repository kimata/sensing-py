image: gitlab.green-rabbit.net:5050/kimata/local-ubuntu:250706_30e7c62e

variables:
    UV_LINK_MODE: copy
    UV_PYTHON_INSTALL_DIR: ${CI_PROJECT_DIR}/.uv_python

stages:
    - generate-tag
    - build
    - tag-latest
    - deploy
    - renovate

generate-tag:
    stage: generate-tag

    script:
        - echo "TAG=$(date +%y%m%d)_${CI_COMMIT_SHORT_SHA}" > tag.env

    artifacts:
        reports:
            dotenv: tag.env
        expire_in: 1 hour

build-image:
    stage: build

    needs:
        - generate-tag

    variables:
        BUILDER: builder
        BUILD_KIT_IMAGE: gitlab.green-rabbit.net:5050/kimata/local-buildkit:250705_7cc0d1c

    before_script:
        - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

    script:
        - 'echo "Building: ${CI_REGISTRY_IMAGE}:${TAG}"'

        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/sense-config.git
        - mv sense-config/*.yaml ./

        - |
            docker buildx create \
                --name ${BUILDER} \
                --driver-opt image=${BUILD_KIT_IMAGE} \
                --use \
                --config /etc/buildkitd.toml

        - docker buildx use ${BUILDER}
        - docker buildx inspect --bootstrap
        - >
            docker buildx build --provenance=false --progress=plain --platform linux/amd64,linux/arm64/v8
            --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache
            --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:latest
            --cache-to type=inline --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache,mode=max
            --build-arg IMAGE_BUILD_DATE=$(date --iso-8601=seconds)
            --tag ${CI_REGISTRY_IMAGE}:${TAG} --push .

tag-latest:
    stage: tag-latest

    needs:
        - generate-tag

    script:
        - 'echo "Tagging multi-arch image ${CI_REGISTRY_IMAGE}:${TAG} as latest"'
        - docker buildx imagetools create -t ${CI_REGISTRY_IMAGE}:latest ${CI_REGISTRY_IMAGE}:${TAG}

    rules:
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

deploy:
    stage: deploy

    script:
        - echo "OK"

    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

renovate:
    stage: renovate
    dependencies: []
    image:
        name: gitlab.green-rabbit.net:5050/kimata/local-renovate:250706_ba282ca1
        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - if: $CI_PIPELINE_SOURCE == "schedule"
        - changes:
              - renovate.json
